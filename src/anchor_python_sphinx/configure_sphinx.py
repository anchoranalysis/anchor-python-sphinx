__author__ = "Owen Feehan"
__copyright__ = "Owen Feehan"
__license__ = "MIT"

from typing import Optional, Any
from sphinx import config
import sphinx
import re


def configure(app: sphinx.Sphinx, version: Optional[str] = None) -> None:

    # -- Project information -----------------------------------------------------

    app.config.project = "anchor_python_visualization"
    app.config.copyright = "2021, Owen Feehan"
    app.config.author = "Owen Feehan"

    _configure_version(app.config, version)

    # -- General configuration ---------------------------------------------------

    # See https://sphinx-autoapi.readthedocs.io/en/latest/reference/config.html#advanced-options
    app.config.autoapi_type = "python"
    app.config.autoapi_dirs = ["../src"]
    app.config.autoapi_options = [
        "members",
        "undoc-members",
        "show-inheritance",
        "show-module-summary",
        "imported-members",
    ]
    app.config.autoapi_ignore = ["*docs/*", "*test/*", "build/*"]
    app.config.autoapi_add_toctree_entry = True

    app.config.intersphinx_mapping = {
        "python": ("https://docs.python.org/3", None),
        "pandas": ("http://pandas.pydata.org/pandas-docs/dev", None),
        "numpy": ("https://numpy.org/doc/stable/", None),
        "matplotlib": ("https://matplotlib.org", None),
        "plotly": ("https://plotly.com/python-api-reference/", None),
    }

    # Add any paths that contain templates here, relative to this directory.
    app.config.templates_path = ["_templates"]

    # The language for content autogenerated by Sphinx. Refer to documentation
    # for a list of supported languages.
    #
    # This is also used if you do content translation via gettext catalogs.
    # Usually you set "language" from the command line for these cases.
    app.config.language = "en"

    # List of patterns, relative to source directory, that match files and
    # directories to ignore when looking for source files.
    # This pattern also affects html_static_path and html_extra_path.
    app.config.exclude_patterns = [
        "_build",
        "Thumbs.db",
        ".DS_Store",
        "**/build",
        "**/docs",
    ]

    # -- Options for HTML output -------------------------------------------------

    # The theme to use for HTML and HTML Help pages.  See the documentation for
    # a list of builtin themes.
    #
    app.config.html_theme = "sphinx_rtd_theme"

    # Add any paths that contain custom static files (such as style sheets) here,
    # relative to this directory. They are copied after the builtin static files,
    # so a file named "default.css" will overwrite the builtin "default.css".
    app.config.html_static_path = ["_static"]

    app.config.html_css_files = [
        "custom.css",
    ]

    # -- Extension configuration -------------------------------------------------

    # -- Options for todo extension ----------------------------------------------

    # If true, `todo` and `todoList` produce output, else they produce nothing.
    app.config.todo_include_todos = True

    app.setup_extension("sphinx.ext.autodoc")
    app.setup_extension("sphinx.ext.viewcode")
    app.setup_extension("sphinx.ext.todo")
    app.setup_extension("sphinx.ext.intersphinx")
    app.setup_extension("autoapi.extension")
    app.setup_extension("sphinx_rtd_theme")

    _configure_autoapi_skip(app, True, True)


def _configure_version(config: config.Config, version: Optional[str]) -> None:
    """Assigns a version if it is specified."""
    if version is not None:
        # The short X.Y version
        config.version = version
        # The full version, including alpha/beta/rc tags
        config.release = version


def _configure_autoapi_skip(
    app: sphinx.Sphinx, skip_private: bool, skip_submodules: bool
) -> None:
    """Configures the autoapi on what entities to skip (or not skip) when making the API documentation.

    :param app: the Sphinx application.
    :param skip_private: if True, private attributes, methods etc. are skipped.
    :param skip_submodules: if True, submodules (any module containing a period) are skipped.
    """

    def determine_whether_to_skip(
        app: sphinx.Sphinx, what: str, name: str, obj: Any, skip: bool, options
    ) -> Optional[bool]:
        """Exclude all private attributes, methods, and dunder methods from Sphinx."""

        # Maybe skip submodules
        if skip_submodules and what == "module" and ("." in str(obj)):
            return True

        # Maybe skip private attributes, methods etc.
        if skip_private:
            exclude = re.findall(r"\._.*", str(obj))
            return skip or exclude
        else:
            return None

    app.connect("autoapi-skip-member", determine_whether_to_skip)
